<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 踩坑记录</title>
      <link href="/2020/02/09/hexo-experience/"/>
      <url>/2020/02/09/hexo-experience/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-踩坑记录"><a href="#Hexo-踩坑记录" class="headerlink" title="Hexo 踩坑记录"></a>Hexo 踩坑记录</h1><p>Hexo 作一个优秀的博客框架，本人也是一直参考着网上零零碎碎的博文一步步搭建的，中间遇到不少坑。每次做一个稍大的项目都要经历这种折腾，今后决定把这些经验记录下来沉淀，有未完成的也留给以后思考。</p><h3 id="1-git-分支未知出错"><a href="#1-git-分支未知出错" class="headerlink" title="1. git 分支未知出错"></a>1. git 分支未知出错</h3><p>修改 matery.css 的时候总是没法同步到 <a href="https://cdn.jsdelivr.net/gh/hopenx/hopenx.github.io" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/hopenx/hopenx.github.io</a>… 的远端，后来发现存在分支的问题，于是在主题的 config.yml 中添加一个 <code>@master</code>:</p><pre><code class="lang-yml">jsDelivr:  url: https://cdn.jsdelivr.net/gh/hopenx/hopenx.github.io@master</code></pre><p>更改的内容部分可以生效，但仍然有一些冥顽不化的配色，本地已经渲染出来了，远端 jsdelivr 死活不改变，加了 @master 也不变，于是直接在 post/post-detail.ejs 页面中添加 css 代码强行修改:</p><pre><code class="lang-css">#articleContent a {    color: #267871; !important;}#artDetail .post-cate a {    color: #267871; !important;}blockquote {    border-left: 5px solid #267871; !important;}#artDetail .reprint a {    color: #267871; !important;}</code></pre><p>挖个坑，希望今后可以好好研究一下 git</p><h3 id="2-Hexo-无法解析代码块"><a href="#2-Hexo-无法解析代码块" class="headerlink" title="2. Hexo 无法解析代码块"></a>2. Hexo 无法解析代码块</h3><p>比如上面的 css 代码块，Hexo 在解析的时候会把它识别成网页 css 的内容，最后没有显示，只能主动适应 Hexo 这种方式：</p><ol><li>不添加 <code>&lt;style type=&quot;text/css&quot;&gt;</code>这种会与网页混淆的内容</li><li>代码块中不添加(1) (2) 序号</li></ol><h3 id="3-Hexo-代码块无法高亮的问题"><a href="#3-Hexo-代码块无法高亮的问题" class="headerlink" title="3. Hexo 代码块无法高亮的问题"></a>3. Hexo 代码块无法高亮的问题</h3><ol><li><p>主要矛盾：<br>hexo 对于 mathjax 的显示支持有问题，需要安装新的 kmarked 插件，修改对于<code>{, (</code>等等的解析规则，而修改规则支持 Mathjax 后，prism 的高亮功能又会失效，简而言之不可兼得</p></li><li><p>解决：<br>我使用的是<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-matery</a>主题，使用了大家推荐的 hexo-prism-plugin 主题，但是出现和 prism 高亮和 Mathjax 语法不兼容的问题。代码不能高亮简直失去了博客写代码的意义。最后使用 [highlight.js] (<a href="https://highlightjs.org/)成功实现代码高亮，参考以下这位博主的设置：[使用" target="_blank" rel="noopener">https://highlightjs.org/)成功实现代码高亮，参考以下这位博主的设置：[使用</a> Highlight.js 优化代码块高亮效果](<a href="http://cps.ninja/2019/03/25/add-highlightjs-to-hexo-blog/" target="_blank" rel="noopener">http://cps.ninja/2019/03/25/add-highlightjs-to-hexo-blog/</a>)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学基础备忘录</title>
      <link href="/2020/02/07/math-notes/"/>
      <url>/2020/02/07/math-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="数学基础备忘录"><a href="#数学基础备忘录" class="headerlink" title="数学基础备忘录"></a>数学基础备忘录</h1><h2 id="排列组合公式"><a href="#排列组合公式" class="headerlink" title="排列组合公式"></a>排列组合公式</h2><p>(A_{n}^{m}=n(n-1) \cdots(n-m+1))  m个数递减相乘<br>(C_{n}^{m}=\frac{A_{n}^{m}}{m !}=\frac{n !}{m !(n-m) !}=C_{n}^{n-m})</p><p>$A^4_4 = 4\times3\times2\times1 = 24$</p><p>$A^4_4$ 计算方法：从4 开始，从 4 到 3 到 2…连续乘 4 个数。<br>$C^3_4$ 计算方法：（先计算 $A^3_4$ 再得到 $C^3_4$ ）$C^3_4 = \frac{A^3_4}{3!} = \frac{4\times3\times2}{3\times2\times1} = 24\div6 = 4$</p><p>比如 $A^2_4$ 表示从 4 个东西东西中抽取任意 2 样，一共有 $4\times3 = 12$ <code>排列</code>方式。<br>$C^3_4$ 表示从 4 个东西东西中抽取任意 3 样，一共有 $\frac{4\times3\times2}{3\times2\times1} = 24\div6 = 4$ 两种<code>组成</code>方式。</p><p>A 表示排列，是有序的，而 C 表示组合，表示有多少种<code>组成</code>方式，只看成员，不看顺序。</p><p>对于 A（排列）来说，<code>4 3 1</code>和<code>1 3 4</code>是两种构成，而对于 C（组合）来说，<code>4 3 1</code>和<code>1 3 4</code>就是同一回事。</p><p>$C^3_5$ = 多少？ </p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习概述</title>
      <link href="/2020/02/06/ml-study-notes/"/>
      <url>/2020/02/06/ml-study-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h1><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><ol><li>监督学习：已经有数据，和数据对应的标签。</li><li>非监督学习：给定的样本无需输出/标签，让机器自己学习样本中隐含的内部结构。</li><li>半监督学习：二者结合。</li><li>强化学习：通过打分/评价的形式，类似于监督学习中的标签。</li></ol><h2 id="机器学习模型"><a href="#机器学习模型" class="headerlink" title="机器学习模型"></a>机器学习模型</h2><p>机器学习 = 数据 data + 模型 model + 优化方法 optimal strategy</p><h2 id="偏差-方差权衡"><a href="#偏差-方差权衡" class="headerlink" title="偏差/方差权衡"></a>偏差/方差权衡</h2><p>variance 和 bias，分别对应过拟合和欠拟合</p><p>来自 Wikipedia：</p><blockquote><p>在监督学习中，如果能将模型的方差与误差权衡好，那么可以认为该模型的泛化性能（对于新数据）将会表现出好的结果。</p><p>偏差刻画的是算法本身的性能。高偏差将会造成欠拟合(Underfitting) [miss the relevant relations between features and target outputs]。换句话说，模型越复杂偏差就越小；而模型越简单，偏差就越大。</p><p>方差用来衡量因训练集数据波动(fluctuations)而造成的误差影响。高方差将会造成过拟合(Overfitting)。</p></blockquote><p>在周志华老师&lt;机器学习&gt;书中是这样阐述的：</p><blockquote><p><em>偏差</em> 度量了学习算法的期望预测与真实结果的偏离程度，即刻画了算法本身的拟合能力；</p><p><em>方差</em> 度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响；</p><p><em>噪声</em> 则表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题的本身难度</p><p>偏差-方差分解说明，泛化性能是由学习算法的能力、数据的充分性以及学习任务本身的难度所共同决定的。给定的学习任务，为了取得好的泛化性能，则需使偏差较小，即能够充分拟合数据，并且使方差较小，即使数据扰动产生的影响小。一般来说方差与偏差是有冲突的，这称为方差-偏差窘境。</p></blockquote><h2 id="常见机器学习算法概览"><a href="#常见机器学习算法概览" class="headerlink" title="常见机器学习算法概览"></a>常见机器学习算法概览</h2><h3 id="1-Linear-Algorithm-线性算法"><a href="#1-Linear-Algorithm-线性算法" class="headerlink" title="1. Linear Algorithm 线性算法"></a>1. Linear Algorithm 线性算法</h3><ol><li><p><strong>Linear Regression 线性回归</strong>：使用最小二乘法 Least Squares 拟合一条直线 → 计算 R<sup>2</sup> → 计算 R<sup>2</sup> 的 p 值。R<sup>2</sup> 表示 x 能多大程度反映 y 的变化，p 值表示可靠程度。拟合直线的过程使用「随机梯度下降」（SGD）</p></li><li><p><strong>Lasso 回归 和 Ridge 回归</strong>：都可以减少共线性带来的影响，即 X 自变量之间有相互关联。区别可以归结为L2和L1正则化的性质差异。</p></li><li><p><strong>Polynomial Regression 多项式回归</strong>：能够模拟非线性可分的数据（曲线），线性回归不能做到这一点。但容易过拟合。</p></li><li><p><strong>Logistic Regression 逻辑回归</strong>：判断 True or False，Y 值为 0-1 表示概率，用于分类。线性回归使用「Residual 偏差」，而逻辑回归使用「maximum likelihood 最大似然」</p></li></ol><h3 id="2-Decision-Tree-决策树"><a href="#2-Decision-Tree-决策树" class="headerlink" title="2. Decision Tree 决策树"></a>2. Decision Tree 决策树</h3><ol><li><p><strong>ID3</strong>: 计算「信息熵」 $Entropy(D)$，值越小，说明样本集合D的纯度就越高，进而选择用样本的某一个属性a来划分样本集合D时，就可以得出用属性a对样本D进行划分所带来的「信息增益」 $Gain(D, a)$，值越大，说明如果用属性a来划分样本集合D，那么纯度会提升。 <script type="math/tex">Entropy(t)=-\sum_{k} p\left(c_{k} | t\right) \log p\left(c_{k} | t\right)</script>  <script type="math/tex">Classificationerror (t)=1-\max _{k}\left[p\left(c_{k} | t\right)\right]</script></p></li><li><p><strong>C4.5</strong>: 提出Gainratio 「增益率」，解决ID3决策树的一个缺点，当一个属性的可取值数目较多时，那么可能在这个属性对应的可取值下的样本只有一个或者是很少个，那么这个时候它的信息增益是非常高的，这个时候纯度很高，ID3决策树会认为这个属性很适合划分，但是较多取值的属性来进行划分带来的问题是它的泛化能力比较弱。用 $I(·)$ 表示不纯度——可以是熵可以是基尼，信息增益：<script type="math/tex">\Delta=I(\text { parent })-\sum_{i=1}^{n} \frac{N\left(a_{i}\right)}{N} I\left(a_{i}\right)</script>信息增益率：<script type="math/tex">Gainratio =\frac{\Delta}{Entropy({parent})}</script></p></li><li><p><strong>CART(Classification and Regression Tree)</strong>: 通过计算 Gini 基尼系数（尽可能小），判断 impurity 不纯洁度。离散数据用「是否」划分子树，连续数据可以用「两两之间平均值」划分子树。<script type="math/tex">{Gini}(t)=1-\sum_{k}\left[p\left(c_{k} | t\right)\right]^{2}</script>D 分裂为 DL 和 DR，分裂后的信息增益<script type="math/tex">Gain(D, A)=\frac{\left|D_{L}\right|}{|D|} \operatorname{Gini}\left(D_{L}\right)+\frac{\left|D_{R}\right|}{|D|} \operatorname{Gini}\left(D_{R}\right)</script></p></li></ol><h3 id="3-SVM-支持向量机"><a href="#3-SVM-支持向量机" class="headerlink" title="3. SVM 支持向量机"></a>3. SVM 支持向量机</h3><p>SVM：<a href="https://blog.csdn.net/liugan528/article/details/79448379" target="_blank" rel="noopener">https://blog.csdn.net/liugan528/article/details/79448379</a></p><p>KKT：<a href="https://blog.csdn.net/qq_32763149/article/details/81055062" target="_blank" rel="noopener">https://blog.csdn.net/qq_32763149/article/details/81055062</a></p><p><strong>SVM 分类</strong>：</p><ol><li>硬间隔支持向量机（线性可分支持向量机）：当训练数据线性可分时，可通过硬间隔最大化学得一个线性可分支持向量机。</li><li>软间隔支持向量机：当训练数据近似线性可分时，可通过软间隔最大化得到一个线性支持向量机。</li><li>非线性支持向量机：当训练数据线性不可分时，可通过核方法以及软间隔最大化得一个非线性支持向量机。</li></ol><p><strong>基本原理</strong>：</p><ol><li><p>Maximum Margin Classifier：只看边界。</p></li><li><p>Soft Margin Classifier（即 Support Vector Classifier）：允许 misclassification误分类，寻找两个支撑向量来确定分类边界。</p></li><li><p>Kernel Function：非线性SVM，从低维数据开始，通过「核函数」给数据升维，然后找到一个 Support Vector Classifier 将数据分成两组。核函数的选择，支撑向量的选择，都用 cross validation 交叉验证。</p></li><li><p>Kernel Trick: 根据升维的距离进行计算，但是不进行实际的升维。</p></li></ol><p><strong>具体过程</strong>：</p><ol><li><p>线性可分的情况：对于超平面 $w \cdot x+b=0$ 和 $margin$ 有关系<script type="math/tex">{margin}=\frac{2}{\|w\|}</script><br> 最大化 $margin$ 等效于最小化 $\frac{1}{2}|w|^{2}$</p><p> 形成一个拉格朗日乘子α的约束问题 <script type="math/tex">\begin{array}{ll}{\min _{w, b}} & {\frac{1}{2}|w|^{2}} {\text {s.t.}} & {y_{i}\left(w \cdot x_{i}+b\right)-1 \geq 0}\end{array}</script><br> 可以列式 <script type="math/tex">L(w, b, \alpha)=\frac{1}{2}|w|^{2}-\sum_{i=1}^{N} \alpha_{i}\left[y_{i}\left(w \cdot x_{i}+b\right)-1\right]</script><br> 拉格朗日对偶性：解决「凸二次规划」（convex quadratic propgramming）问题，即将原始的约束最优化问题可等价于极大极小的对偶问题（以 w,b 作参数时的最小值，以α作参数时的最大值）<br> <script type="math/tex">\max _{\alpha} \min _{w, b} \quad L(w, b, \alpha)</script>通过求导一系列步骤，转换成\begin{array}{ll}<br>{\min _{\alpha}} &amp; {\frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} \alpha_{i} \alpha_{j} y_{i} y_{j}\left(x_{i} \cdot x_{j}\right)-\sum_{i=1}^{N} \alpha_{i}} \\<br>{\text { s.t. }} &amp; {\sum_{i=1}^{N} \alpha_{i} y_{i}=0} \\<br>{} &amp; {\alpha_{i} \geq 0, \quad i=1,2, \cdots, N}<br>\end{array}</p></li><li><p>线性不可分的情况：对每个样本引入一个松弛变量 $\xi_{i} \geq 0$, 约束条件和目标函数变为</p><script type="math/tex; mode=display">\begin{aligned}&y_{i}\left(w \cdot x_{i}+b\right) \geq 1-\xi_{i}\\&\min _{w, b, \xi} \frac{1}{2}\|w\|^{2}+C \sum_{i=1}^{N} \xi_{i}\end{aligned}</script></li></ol><p><strong>部分术语</strong>：</p><ol><li><p>KKT 条件：是拉格朗日乘子的泛化，把所有的不等式约束、等式约束和目标函数全部写为一个式子L(a, b, x)= f(x) + a<em>g(x) + b</em>h(x)，KKT条件是说最优值必须满足以下条件：（1）L(a, b, x)对x求导为零；（2）h(x) =0; （3）a*g(x) = 0;</p></li><li><p>SMO：Sequential Minimal Optimization用二次规划来求解α，要用到 KKT</p></li><li><p>SVR：支持向量回归</p></li></ol><p><strong>优点</strong>：<br>SVM在中小量样本规模的时候容易得到数据和特征之间的非线性关系，可以避免使用神经网络结构选择和局部极小值问题，可解释性强，可以解决高维问题。</p><p><strong>缺点</strong>：<br>SVM对缺失数据敏感，对非线性问题没有通用的解决方案，核函数的正确选择不容易，计算复杂度高，主流的算法可以达到O(n2)O(n2)的复杂度，这对大规模的数据是吃不消的。</p><h3 id="4-Naive-Bayes-Algorithms-朴素贝叶斯"><a href="#4-Naive-Bayes-Algorithms-朴素贝叶斯" class="headerlink" title="4. Naive Bayes Algorithms 朴素贝叶斯"></a>4. Naive Bayes Algorithms 朴素贝叶斯</h3><ol><li>Naive Bayes</li><li>Gaussian Naive Bayes</li><li>Multinomial Naive Bayes</li><li>Bayesian Belief Network (BBN)</li><li>Bayesian Network (BN)</li></ol><p>朴素贝叶斯基本公式：$P(A|B) = \frac{P(B|A)P(A)}{P(B)}$<br><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/J46IjSoqFuD1vtW.png" alt="J46IjSoqFuD1vtW"></p><h3 id="5-KNN-k-NearestNeighbor-K-最邻近算法"><a href="#5-KNN-k-NearestNeighbor-K-最邻近算法" class="headerlink" title="5. KNN (k-NearestNeighbor) K 最邻近算法"></a>5. KNN (k-NearestNeighbor) K 最邻近算法</h3><p>用于分类</p><ol><li>计算测试数据与各个训练数据之间的距离；</li><li>按照距离的递增关系进行排序；</li><li>选取距离最小的K个点；</li><li>确定前K个点所在类别的出现频率；</li><li>返回前K个点中出现频率最高的类别作为测试数据的预测分类</li></ol><p><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/ScAOKyPqMGWdrLH.png" alt="ScAOKyPqMGWdrLH"></p><h3 id="6-Clustering-Algorithm-聚类算法"><a href="#6-Clustering-Algorithm-聚类算法" class="headerlink" title="6. Clustering Algorithm 聚类算法"></a>6. Clustering Algorithm 聚类算法</h3><ol><li>k-Means：选取平均值</li><li>k-Medians：由选取平均值改为选取中位数</li><li>Expectation Maximisation (EM)：有隐含随机变量的概率模型的参数的估计方法，它是一种无监督的算法</li><li><p>Hierarchical Clustering 层次聚类：<br>算法如下：</p><p>(1) 将每个对象看作一类，计算两两之间的最小距离；</p><p>(2) 将距离最小的两个类合并成一个新类；</p><p>(3) 重新计算新类与所有类之间的距离；</p><p>(4) 重复(2)、(3)，直到所有类最后合并成一类。</p></li></ol><h3 id="7-K-means-算法"><a href="#7-K-means-算法" class="headerlink" title="7. K-means 算法"></a>7. K-means 算法</h3><p>算法如下：</p><pre><code>选取k个初始质心(作为初始cluster);repeat:    对每个样本点，计算得到距其最近的质心，将其类别标为该质心所对应的cluster;    重新计算k个cluser对应的质心;until 质心不再发生变化</code></pre><p><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/VLCReWo92QXSNP4.jpg" alt="VLCReWo92QXSNP4"></p><h3 id="8-Random-Forest-随机森林"><a href="#8-Random-Forest-随机森林" class="headerlink" title="8. Random Forest 随机森林"></a>8. Random Forest 随机森林</h3><h3 id="9-Dimensionality-Reduction-Algorithms-降维算法"><a href="#9-Dimensionality-Reduction-Algorithms-降维算法" class="headerlink" title="9. Dimensionality Reduction Algorithms 降维算法"></a>9. Dimensionality Reduction Algorithms 降维算法</h3><h3 id="10-Gradient-Boosting-algorithms-梯度提升算法"><a href="#10-Gradient-Boosting-algorithms-梯度提升算法" class="headerlink" title="10. Gradient Boosting algorithms 梯度提升算法"></a>10. Gradient Boosting algorithms 梯度提升算法</h3><ol><li>GBM</li><li>XGBoost</li><li>LightGBM</li><li>CatBoost</li></ol><h3 id="11-Deep-Learning-Algorithms-深度学习"><a href="#11-Deep-Learning-Algorithms-深度学习" class="headerlink" title="11. Deep Learning Algorithms 深度学习"></a>11. Deep Learning Algorithms 深度学习</h3><ol><li>Convolutional Neural Network (CNN)</li><li>Recurrent Neural Networks (RNNs)</li><li>Long Short-Term Memory Networks (LSTMs)</li><li>Stacked Auto-Encoders</li><li>Deep Boltzmann Machine (DBM)</li><li>Deep Belief Networks (DBN)</li></ol><hr><h2 id="机器学习损失函数"><a href="#机器学习损失函数" class="headerlink" title="机器学习损失函数"></a>机器学习损失函数</h2><ol><li>0-1损失函数<script type="math/tex; mode=display">L(y,f(x)) =\begin{cases}0, & \text{y = f(x)}  \\1, & \text{y $\neq$ f(x)}\end{cases}</script></li><li>绝对值损失函数<script type="math/tex; mode=display">L(y,f(x))=|y-f(x)|</script></li><li>平方损失函数<script type="math/tex; mode=display">L(y,f(x))=(y-f(x))^2</script></li><li>log对数损失函数<script type="math/tex; mode=display">L(y,f(x))=log(1+e^{-yf(x)})</script></li><li>指数损失函数<script type="math/tex; mode=display">L(y,f(x))=exp(-yf(x))</script></li><li>Hinge损失函数<script type="math/tex; mode=display">L(w,b)=max\{0,1-yf(x)\}</script></li></ol><hr><h2 id="机器学习优化方法"><a href="#机器学习优化方法" class="headerlink" title="机器学习优化方法"></a>机器学习优化方法</h2><p>梯度下降是最常用的优化方法之一，它使用梯度的反方向 $ \nabla_\theta J(\theta) $ 更新参数 $ \theta $，使得目标函数$J(\theta)$达到最小化的一种优化方法，这种方法我们叫做梯度更新. </p><ol><li>(全量)梯度下降<script type="math/tex; mode=display">\theta=\theta-\eta\nabla_\theta J(\theta)</script></li><li>随机梯度下降<script type="math/tex; mode=display">\theta=\theta-\eta\nabla_\theta J(\theta;x^{(i)},y^{(i)})</script></li><li>小批量梯度下降<script type="math/tex; mode=display">\theta=\theta-\eta\nabla_\theta J(\theta;x^{(i:i+n)},y^{(i:i+n)})</script></li><li>引入动量的梯度下降<script type="math/tex; mode=display">\begin{cases}v_t=\gamma v_{t-1}+\eta \nabla_\theta J(\theta)  \\\theta=\theta-v_t\end{cases}</script></li><li>自适应学习率的Adagrad算法<script type="math/tex; mode=display">\begin{cases}g_t= \nabla_\theta J(\theta)  \\\theta_{t+1}=\theta_{t,i}-\frac{\eta}{\sqrt{G_t+\varepsilon}} \cdot g_t\end{cases}</script></li><li><p>牛顿法</p><script type="math/tex; mode=display">\theta_{t+1}=\theta_t-H^{-1}\nabla_\theta J(\theta_t)</script><p> 其中:<br> $t$: 迭代的轮数</p><p> $\eta$: 学习率</p><p> $G_t$: 前t次迭代的梯度和</p><p> $\varepsilon:$很小的数,防止除0错误</p><p> $H$: 损失函数相当于$\theta$的Hession矩阵在$\theta_t$处的估计</p></li></ol><hr><h2 id="机器学习的评价指标"><a href="#机器学习的评价指标" class="headerlink" title="机器学习的评价指标"></a>机器学习的评价指标</h2><ol><li>MSE(Mean Squared Error)<script type="math/tex; mode=display">MSE(y,f(x))=\frac{1}{N}\sum_{i=1}^{N}(y-f(x))^2</script></li><li>MAE(Mean Absolute Error)<script type="math/tex; mode=display">MSE(y,f(x))=\frac{1}{N}\sum_{i=1}^{N}|y-f(x)|</script></li><li>RMSE(Root Mean Squard Error)<script type="math/tex; mode=display">RMSE(y,f(x))=\frac{1}{1+MSE(y,f(x))}</script></li><li>Top-k准确率<script type="math/tex; mode=display">Top_k(y,pre_y)=\begin{cases}1, {y \in pre_y}  \\0, {y \notin pre_y}\end{cases}</script></li><li>混淆矩阵</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">混淆矩阵</th><th style="text-align:center">Predicted as Positive</th><th style="text-align:center">Predicted as Negative</th></tr></thead><tbody><tr><td style="text-align:center">Labeled as Positive</td><td style="text-align:center">True Positive(TP)</td><td style="text-align:center">False Negative(FN)</td></tr><tr><td style="text-align:center">Labeled as Negative</td><td style="text-align:center">False Positive(FP)</td><td style="text-align:center">True Negative(TN)</td></tr></tbody></table></div><ul><li>真正例(True Positive, TP):真实类别为正例, 预测类别为正例</li><li>假负例(False Negative, FN): 真实类别为正例, 预测类别为负例</li><li>假正例(False Positive, FP): 真实类别为负例, 预测类别为正例 </li><li><p>真负例(True Negative, TN): 真实类别为负例, 预测类别为负例</p></li><li><p>真正率(True Positive Rate, TPR): 被预测为正的正样本数 / 正样本实际数</p><script type="math/tex; mode=display">TPR=\frac{TP}{TP+FN}</script></li><li><p>假负率(False Negative Rate, FNR): 被预测为负的正样本数/正样本实际数</p><script type="math/tex; mode=display">FNR=\frac{FN}{TP+FN}</script></li><li><p>假正率(False Positive Rate, FPR): 被预测为正的负样本数/负样本实际数，</p><script type="math/tex; mode=display">FPR=\frac{FP}{FP+TN}</script></li><li>真负率(True Negative Rate, TNR): 被预测为负的负样本数/负样本实际数，<script type="math/tex; mode=display">TNR=\frac{TN}{FP+TN}</script></li><li>准确率(Accuracy)<script type="math/tex; mode=display">ACC=\frac{TP+TN}{TP+FN+FP+TN}</script></li><li>精准率<script type="math/tex; mode=display">P=\frac{TP}{TP+FP}</script></li><li>召回率<script type="math/tex; mode=display">R=\frac{TP}{TP+FN}</script></li><li>F1-Score<script type="math/tex; mode=display">\frac{2}{F_1}=\frac{1}{P}+\frac{1}{R}</script></li><li><strong>ROC</strong></li></ul><p>ROC曲线的横轴为“假正例率”，纵轴为“真正例率”. 以FPR为横坐标，TPR为纵坐标，那么ROC曲线就是改变各种阈值后得到的所有坐标点 (FPR,TPR) 的连线，画出来如下。红线是随机乱猜情况下的ROC，曲线越靠左上角，分类器越佳. </p><ul><li><strong>AUC(Area Under Curve)</strong></li></ul><p>AUC就是ROC曲线下的面积. 真实情况下，由于数据是一个一个的，阈值被离散化，呈现的曲线便是锯齿状的，当然数据越多，阈值分的越细，”曲线”越光滑. </p><p><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/Ky4FT1MVe3PUYai.jpg" alt="Ky4FT1MVe3PUYai"></p><p>用AUC判断分类器（预测模型）优劣的标准:</p><ul><li>AUC = 1 是完美分类器，采用这个预测模型时，存在至少一个阈值能得出完美预测。绝大多数预测的场合，不存在完美分类器.</li><li>0.5 &lt; AUC &lt; 1，优于随机猜测。这个分类器（模型）妥善设定阈值的话，能有预测价值.</li><li>AUC &lt; 0.5，比随机猜测还差；但只要总是反预测而行，就优于随机猜测.</li></ul><h2 id="机器学习模型选择"><a href="#机器学习模型选择" class="headerlink" title="机器学习模型选择"></a>机器学习模型选择</h2><ol><li>交叉验证</li></ol><p>所有数据分为三部分：训练集、交叉验证集和测试集。交叉验证集不仅在选择模型时有用，在超参数选择、正则项参数 [公式] 和评价模型中也很有用。</p><ol><li>k-折叠交叉验证</li></ol><ul><li>假设训练集为S ，将训练集等分为k份:$\{S_1, S_2, …, S_k\}$. </li><li>然后每次从集合中拿出k-1份进行训练</li><li>利用集合中剩下的那一份来进行测试并计算损失值</li><li>最后得到k次测试得到的损失值，并选择平均损失值最小的模型</li></ul><ol><li>Bias与Variance，欠拟合与过拟合</li></ol><p><strong>欠拟合</strong>一般表示模型对数据的表现能力不足，通常是模型的复杂度不够，并且Bias高，训练集的损失值高，测试集的损失值也高.</p><p><strong>过拟合</strong>一般表示模型对数据的表现能力过好，通常是模型的复杂度过高，并且Variance高，训练集的损失值低，测试集的损失值高.</p><p><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/dIiSlJVkjFL6EpB.jpg" alt="dIiSlJVkjFL6EpB"></p><p><img src="https://i.loli.net/2020/02/09/2OERK3tFJve4YDH.gif" data-original="https://i.loli.net/2020/02/09/Dn5bB8wUVgmsIzC.jpg" alt="Dn5bB8wUVgmsIzC"></p><ol><li>解决方法</li></ol><ul><li>增加训练样本: 解决高Variance情况</li><li>减少特征维数: 解决高Variance情况</li><li>增加特征维数: 解决高Bias情况</li><li>增加模型复杂度: 解决高Bias情况</li><li>减小模型复杂度: 解决高Variance情况</li></ul><h2 id="机器学习参数调优"><a href="#机器学习参数调优" class="headerlink" title="机器学习参数调优"></a>机器学习参数调优</h2><ol><li>网格搜索</li></ol><p>一种调参手段；穷举搜索：在所有候选的参数选择中，通过循环遍历，尝试每一种可能性，表现最好的参数就是最终的结果</p><ol><li>随机搜索</li></ol><p>与网格搜索相比，随机搜索并未尝试所有参数值，而是从指定的分布中采样固定数量的参数设置。它的理论依据是，如果随即样本点集足够大，那么也可以找到全局的最大或最小值，或它们的近似值。通过对搜索范围的随机取样，随机搜索一般会比网格搜索要快一些。</p><ol><li>贝叶斯优化算法</li></ol><p>贝叶斯优化用于机器学习调参由J. Snoek(2012)提出，主要思想是，给定优化的目标函数(广义的函数，只需指定输入和输出即可，无需知道内部结构以及数学性质)，通过不断地添加样本点来更新目标函数的后验分布(高斯过程,直到后验分布基本贴合于真实分布。简单的说，就是考虑了上一次参数的信息，从而更好的调整当前的参数。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到 Hexo</title>
      <link href="/2020/02/02/hello-world/"/>
      <url>/2020/02/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p>本博客采用 Hexo 快速搭建，也欢迎大家上手使用 Hexo，选择自己喜欢的主题，省时省力，工具齐全，生态优越，可扩展性好</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
